#
# React
#
snippet ic "import component"
import $1 from 'components/$1'${0}
endsnippet

snippet ks "key with string value"
${1}: '${2}'${0}
endsnippet

snippet ko "key with object value"
${1}: ${2}${0}
endsnippet

snippet c "const"
const ${1} = ${0}
endsnippet

# Only works with blank space before it
snippet cbs "const bracket spaced" "re.match(' *', snip.buffer[snip.line])" e 
const { ${1} } = ${0}
endsnippet

snippet onc "onClick"
onClick={() => ${1}}
endsnippet

snippet ir "Import React" b
import React from 'react'
endsnippet

snippet cdm "componentDidMount"
componentDidMount () {
	${1}
}
endsnippet
snippet cwm "componentWillMount"
componentWillMount () {
	${1}
}
endsnippet

snippet ed "export default"
export default ${0}
endsnippet

snippet irc "Import React and Component" b
import React, { Component } from 'react'
endsnippet

snippet rclass "React Class" b
class $1 extends Component {
	constructor (props) {
		super(props)
		${2: this.state = {
			${3: }
		}}
	}

	render () {
	
		return (${0})
	}
} 
endsnippet

snippet co "component"
<${1} />
endsnippet

snippet map "map fcn" i
map((${1}) => ${0})
endsnippet

snippet sfc "Stateless Functional Component" b
const $1 = (\{${2}\}) => {
	return (
		${0}
	)
}

endsnippet

snippet red "reduce"
$1.reduce((p, $2) => {
	$4
}, $3)${0}

endsnippet

snippet caf "const arrow function"
const $1 = ($2) => {
	$3
}${0}

endsnippet

snippet aaf "anonymous arrow function" i
($1) => {
	$2
}${0}

endsnippet

snippet t "Tag"
<${1} ${2}>${0}</$1>
endsnippet

snippet tn "Tag with new line"
<${1} ${2}>
	${0}
</$1>
endsnippet

snippet cn "className (string)"
className='$1'${0}
endsnippet

snippet cnb "className"
className={$1}${0}
endsnippet

snippet r "return"
return $1${0}
endsnippet

snippet pts "PropTypes string"
PropTypes.string${0}
endsnippet

snippet ptsr "PropTypes string required"
PropTypes.string.isRequired${0}
endsnippet

snippet pto "PropTypes object"
PropTypes.object${0}
endsnippet

snippet ptor "PropTypes object required"
PropTypes.object.isRequired${0}
endsnippet

snippet de "debugger;"
debugger;${0}
endsnippet

snippet d "<div>"
<div${1}>
	${0}
</div>
endsnippet

snippet div "<div>"
<div${1}>
	${0}
</div>
endsnippet

snippet if "if statement"
if ($1) {
	${0}
}
endsnippet

snippet pp "pass prop (identity)"
$1={$1}${0}
endsnippet

snippet pr "pass prop"
$1={${0}}
endsnippet

snippet pn "parens with new line" i
(
	${0}
)
endsnippet

snippet p "parens" i
(${0})
endsnippet

# only expand after a space, paren, equals
snippet b "braces" "re.match('[ (=]', snip.buffer[snip.line])" e
{${0}}
endsnippet

snippet bs "braces with space" "re.match('[ (=]', snip.buffer[snip.line])" e
{ ${0} }
endsnippet

snippet pb "braces in parens with space" i
({ ${0} })
endsnippet

snippet bn "braces with new line" i
{
	${0}
}
endsnippet

snippet a "array brackets" i
[${0}]
endsnippet

snippet an "array brackets new line" i
[
	${0}
]
endsnippet

snippet st "string interpolation" i
\$\{$1\}${0}
endsnippet

snippet oa "Object.assign"
Object.assign({$1}, $2) ${0}
endsnippet

snippet i "import" b
import $1 from '$2'
endsnippet

snippet di "Destructured Import" b
import \{ $1 \} from '$2'${0}

endsnippet
#
# console methods
#

snippet dir "console.dir"
console.dir(${1})
endsnippet

snippet cl
console.log('$1')
endsnippet

snippet ifclv "console log in if"
if ($1) {
	console.log('$1 ', $1)
}
endsnippet

snippet clv
console.log('$1: ', $1)
endsnippet

snippet clvj
console.log('$1: ', $1.toJSON())
endsnippet

snippet cl*
console.log('**************************')
endsnippet
